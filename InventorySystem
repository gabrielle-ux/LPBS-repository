import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class InventoryItem {
    private String itemId;
    private String name;
    private String category;
    private int currentStock;
    private int minThreshold;
    private LocalDateTime lastUpdated;

    public InventoryItem(String itemId, String name, String category, int currentStock) {
        this(itemId, name, category, currentStock, 5);
    }

    public InventoryItem(String itemId, String name, String category, int currentStock, int minThreshold) {
        this.itemId = itemId;
        this.name = name;
        this.category = category;
        this.currentStock = currentStock;
        this.minThreshold = minThreshold;
        this.lastUpdated = LocalDateTime.now();
    }

    // Getters and Setters
    public String getItemId() {
        return itemId;
    }

    public void setItemId(String itemId) {
        this.itemId = itemId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public int getCurrentStock() {
        return currentStock;
    }

    public void setCurrentStock(int currentStock) {
        this.currentStock = currentStock;
    }

    public int getMinThreshold() {
        return minThreshold;
    }

    public void setMinThreshold(int minThreshold) {
        this.minThreshold = minThreshold;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }
}

class Transaction {
    private LocalDateTime timestamp;
    private String itemId;
    private String action;
    private int quantity;
    private String user;
    private String notes;

    public Transaction(String itemId, String action, int quantity, String user, String notes) {
        this.timestamp = LocalDateTime.now();
        this.itemId = itemId;
        this.action = action;
        this.quantity = quantity;
        this.user = user;
        this.notes = notes;
    }

    // Getters
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public String getItemId() {
        return itemId;
    }

    public String getAction() {
        return action;
    }

    public int getQuantity() {
        return quantity;
    }

    public String getUser() {
        return user;
    }

    public String getNotes() {
        return notes;
    }
}

class User {
    private String password;
    private String role;

    public User(String password, String role) {
        this.password = password;
        this.role = role;
    }

    // Getters
    public String getPassword() {
        return password;
    }

    public String getRole() {
        return role;
    }
}

public class InventorySystem {
    private Map<String, InventoryItem> inventory;
    private List<Transaction> transactions;
    private Map<String, User> users;
    private Scanner scanner;

    public InventorySystem() {
        this.inventory = new HashMap<>();
        this.transactions = new ArrayList<>();
        this.users = new HashMap<>();
        this.scanner = new Scanner(System.in);
        
        // Initialize users
        users.put("cook", new User("kitchen123", "cook"));
        users.put("admin", new User("admin123", "admin"));
        
        // Preload some sample data
        inventory.put("INV-001", new InventoryItem(
            "INV-001",
            "Whiteboard Markers",
            "Classroom Supplies",
            18
        ));
        
        inventory.put("INV-002", new InventoryItem(
            "INV-002",
            "Notebooks",
            "Stationery",
            50
        ));
    }

    public String authenticate() {
        System.out.println("\n=== Inventory System Login ===");
        System.out.print("Username: ");
        String username = scanner.nextLine().trim().toLowerCase();
        System.out.print("Password: ");
        String password = scanner.nextLine().trim();
        
        if (users.containsKey(username) && users.get(username).getPassword().equals(password)) {
            System.out.println("Welcome, " + username + "!");
            return users.get(username).getRole();
        }
        System.out.println("Invalid credentials");
        return null;
    }

    public void addItem() {
        System.out.println("\n=== Add New Inventory Item ===");
        System.out.print("Enter item ID: ");
        String itemId = scanner.nextLine().trim();
        
        if (inventory.containsKey(itemId)) {
            System.out.println("Error: Item ID already exists!");
            return;
        }
        
        System.out.print("Enter item name: ");
        String name = scanner.nextLine().trim();
        System.out.print("Enter category: ");
        String category = scanner.nextLine().trim();
        System.out.print("Enter initial quantity: ");
        int quantity = Integer.parseInt(scanner.nextLine().trim());
        
        inventory.put(itemId, new InventoryItem(itemId, name, category, quantity));
        logTransaction(itemId, "Item Added", quantity, "system", "Initial stock");
        System.out.println("Successfully added " + name + " (" + itemId + ")");
        generateReport(itemId);
    }

    public void updateItem() {
        System.out.println("\n=== Update Inventory Item ===");
        System.out.print("Enter item ID to update: ");
        String itemId = scanner.nextLine().trim();
        
        if (!inventory.containsKey(itemId)) {
            System.out.println("Error: Item not found!");
            return;
        }
        
        InventoryItem item = inventory.get(itemId);
        generateReport(itemId);
        
        System.out.println("\nWhat would you like to update?");
        System.out.println("1. Quantity");
        System.out.println("2. Item Name");
        System.out.println("3. Item ID");
        System.out.print("Select option (1-3): ");
        String choice = scanner.nextLine().trim();
        
        if (choice.equals("1")) {
            System.out.print("Current stock: " + item.getCurrentStock() + ". Enter new quantity: ");
            int newQty = Integer.parseInt(scanner.nextLine().trim());
            int delta = newQty - item.getCurrentStock();
            item.setCurrentStock(newQty);
            String action = delta > 0 ? "Restock" : "Usage";
            System.out.print("Enter reason for change: ");
            String notes = scanner.nextLine().trim();
            logTransaction(itemId, action, delta, "user", notes);
        } else if (choice.equals("2")) {
            System.out.print("Current name: " + item.getName() + ". Enter new name: ");
            String newName = scanner.nextLine().trim();
            item.setName(newName);
            logTransaction(itemId, "Name Update", 0, "user", "Changed to " + newName);
        } else if (choice.equals("3")) {
            System.out.print("Current ID: " + item.getItemId() + ". Enter new ID: ");
            String newId = scanner.nextLine().trim();
            inventory.put(newId, inventory.remove(itemId));
            logTransaction(itemId, "ID Update", 0, "user", "Changed to " + newId);
            itemId = newId;  // Update reference for report
        } else {
            System.out.println("Invalid selection");
            return;
        }
        
        item.setLastUpdated(LocalDateTime.now());
        System.out.println("Update successful!");
        generateReport(itemId);
    }

    public void deleteItem() {
        System.out.println("\n=== Delete Inventory Item ===");
        System.out.print("Enter item ID to delete: ");
        String itemId = scanner.nextLine().trim();
        
        if (!inventory.containsKey(itemId)) {
            System.out.println("Error: Item not found!");
            return;
        }
        
        InventoryItem item = inventory.get(itemId);
        System.out.println("\nItem to delete: " + item.getName() + " (ID: " + itemId + ")");
        System.out.println("Current stock: " + item.getCurrentStock());
        
        System.out.print("Are you sure you want to delete this item? (y/n): ");
        String confirm = scanner.nextLine().trim().toLowerCase();
        if (confirm.equals("y")) {
            inventory.remove(itemId);
            logTransaction(itemId, "Item Deleted", -item.getCurrentStock(), "user", "Permanently removed");
            System.out.println("Successfully deleted " + itemId);
            generateReport();  // Show full inventory
        } else {
            System.out.println("Deletion cancelled");
        }
    }

    private void logTransaction(String itemId, String action, int quantity, String user, String notes) {
        transactions.add(new Transaction(itemId, action, quantity, user, notes));
    }

    public void generateReport() {
        generateReport(null);
    }

    public void generateReport(String itemId) {
        System.out.println("\n=== INVENTORY REPORT ===");
        
        if (itemId != null) {
            if (inventory.containsKey(itemId)) {
                InventoryItem item = inventory.get(itemId);
                System.out.println("Item: " + item.getName() + " (ID: " + itemId + ")");
                System.out.println("Category: " + item.getCategory());
                System.out.println("Current Stock: " + item.getCurrentStock());
                System.out.println("Last Updated: " + item.getLastUpdated());
            }
            List<Transaction> filteredTransactions = new ArrayList<>();
            for (Transaction t : transactions) {
                if (t.getItemId().equals(itemId)) {
                    filteredTransactions.add(t);
                }
            }
            printTransactions(filteredTransactions);
        } else {
            System.out.println("All Inventory Items:");
            for (Map.Entry<String, InventoryItem> entry : inventory.entrySet()) {
                System.out.println(entry.getKey() + ": " + entry.getValue().getName() + 
                                 " (" + entry.getValue().getCurrentStock() + " units)");
            }
            printTransactions(transactions);
        }
    }

    private void printTransactions(List<Transaction> transactions) {
        System.out.println("\nTransaction History:");
        for (Transaction t : transactions) {
            System.out.printf("%s | %-12s | Qty: %+d | By: %-8s | %s\n",
                t.getTimestamp(), t.getAction(), t.getQuantity(), t.getUser(), t.getNotes());
        }
    }

    public void mainMenu() {
        String role = authenticate();
        if (role == null) {
            return;
        }
        
        while (true) {
            System.out.println("\n=== Main Menu ===");
            System.out.println("1. Add New Inventory Item");
            System.out.println("2. Update Existing Item");
            System.out.println("3. Delete Inventory Item");
            System.out.println("4. View Inventory Report");
            System.out.println("5. Exit");
            
            System.out.print("Select option (1-5): ");
            String choice = scanner.nextLine().trim();
            
            switch (choice) {
                case "1":
                    addItem();
                    break;
                case "2":
                    updateItem();
                    break;
                case "3":
                    deleteItem();
                    break;
                case "4":
                    generateReport();
                    break;
                case "5":
                    System.out.println("Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice, please try again");
            }
        }
    }

    public static void main(String[] args) {
        InventorySystem system = new InventorySystem();
        system.mainMenu();
    }
}
